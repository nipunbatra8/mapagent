"use strict";
// File: src/service/service.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseApiKey = parseApiKey;
exports.createBaseDAINService = createBaseDAINService;
const tslib_1 = require("tslib");
const core_1 = require("./core");
const server_1 = require("./server");
const bs58_1 = tslib_1.__importDefault(require("bs58"));
function parseApiKey(apiKey) {
    const parts = apiKey.split("_");
    if (parts.length !== 5 || parts[0] !== "sk" || parts[1] !== "agent") {
        throw new Error("Invalid API key format");
    }
    const orgId = parts[2].replace("org_", "");
    const agentId = parts[3].replace("agent_", "");
    const pk = parts[4];
    // first 32 bytes are the private key and second 32 bytes are the public key from the imported key
    const privateKeyBuffer = bs58_1.default.decode(pk);
    const privateKey = privateKeyBuffer.slice(0, 32);
    const publicKey = privateKeyBuffer.slice(32);
    return {
        orgId,
        agentId,
        privateKey: bs58_1.default.encode(privateKey),
        publicKey: bs58_1.default.encode(publicKey), // Assuming the public key is the first 32 bytes
    };
}
function createBaseDAINService(config) {
    let identity;
    if (!config.pinnables) {
        config.pinnables = [];
    }
    if (!config.contexts) {
        config.contexts = [];
    }
    if (!config.services || config.services.length === 0) {
        // default it to one that has all the tools and takes in a lot of info from the normal description
        config.services = [
            {
                id: config.metadata.title + "-service",
                name: config.metadata.title + " Service",
                description: config.metadata.description,
                metadata: {
                    capabilities: [config.metadata.description],
                    languages: ["en-US"],
                },
                recommendedPrompt: config.metadata.description,
                recommendedTools: config.tools.map((tool) => tool.id),
            },
        ];
    }
    if (!config.toolboxes || config.toolboxes.length === 0) {
        // default it to one that has all the tools and takes in a lot of info from the normal description
        config.toolboxes = [
            {
                id: config.metadata.title + "-toolbox",
                name: config.metadata.title + " Toolbox",
                description: config.metadata.description,
                tools: config.tools.map((tool) => tool.id),
                metadata: {
                    complexity: "Medium",
                    applicableFields: [config.metadata.description],
                },
                recommendedPrompt: "Use these tools for  " +
                    config.metadata.description +
                    " involving the " +
                    config.metadata.title +
                    " service \n\n" +
                    config.tools
                        .map((tool) => tool.id + " : " + tool.name + " - " + tool.description)
                        .join("\n"),
            },
        ];
    }
    if (config.identity.apiKey) {
        identity = parseApiKey(config.identity.apiKey);
    }
    else if (config.identity.publicKey &&
        config.identity.privateKey &&
        config.identity.agentId &&
        config.identity.orgId) {
        identity = {
            ...config.identity,
            agentId: config.identity.agentId.replace("agent_", ""),
            orgId: config.identity.orgId.replace("org_", ""),
        };
    }
    else {
        throw new Error("Invalid identity configuration. Provide either an apiKey or all required identity fields.");
    }
    const tools = config.tools.map((toolConfig) => (0, core_1.createTool)(toolConfig));
    const services = config.services.map((serviceConfig) => (0, core_1.createService)(serviceConfig));
    const toolboxes = config.toolboxes.map((toolboxConfig) => (0, core_1.createToolbox)(toolboxConfig));
    config.metadata.tags = core_1.CoreUtils.sanitizeTags(config.metadata.tags);
    let app;
    const startService = function () {
        const privateKey = bs58_1.default.decode(identity.privateKey);
        app = (0, server_1.setupHttpServer)({
            ...config,
            identity,
            onHumanActionResponse: config.onHumanActionResponse
        }, tools, services, toolboxes, config.metadata, privateKey, config.contexts, config.pinnables);
        return app;
    };
    const getMetadata = () => config.metadata;
    const getServices = () => services;
    const getTools = () => tools;
    const getToolboxes = () => toolboxes;
    const findTool = (toolId) => tools.find((tool) => tool.id === toolId);
    const findToolbox = (toolboxId) => toolboxes.find((toolbox) => toolbox.id === toolboxId);
    const findService = (serviceId) => services.find((service) => service.id === serviceId);
    return {
        getMetadata,
        getServices,
        getTools,
        getToolboxes,
        findTool,
        findToolbox,
        findService,
        app,
        startService,
    };
}
//# sourceMappingURL=service.js.map