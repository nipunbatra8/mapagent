import { z } from "zod";
import { ToolConfig, ServiceConfig, ToolboxConfig, AgentInfo, PricingInfo, ServiceContext, ServicePinnable } from "./types";
export declare function createTool<TInput extends z.ZodType, TOutput extends z.ZodType>(config: ToolConfig<TInput, TOutput>): ToolConfig<TInput, TOutput>;
export declare function createService(config: ServiceConfig): ServiceConfig;
export declare function createContext(config: ServiceContext): ServiceContext;
export declare function createPinnable(config: ServicePinnable): ServicePinnable;
export declare function createToolbox(config: ToolboxConfig): ToolboxConfig;
export declare function validateAgentInfo(agentInfo: AgentInfo): boolean;
export declare function calculatePrice(pricing: PricingInfo, usageCount: number): number;
export declare function generateId(prefix: string): string;
export declare function sanitizeTags(tags: string[]): string[];
export declare function mergeToolboxes(toolboxes: ToolboxConfig[]): ToolboxConfig;
export declare function validatePricing(pricing: PricingInfo): boolean;
export declare function isToolInToolbox(toolId: string, toolbox: ToolboxConfig): boolean;
export declare const CoreUtils: {
    validateAgentInfo: typeof validateAgentInfo;
    calculatePrice: typeof calculatePrice;
    generateId: typeof generateId;
    sanitizeTags: typeof sanitizeTags;
    mergeToolboxes: typeof mergeToolboxes;
    validatePricing: typeof validatePricing;
    isToolInToolbox: typeof isToolInToolbox;
};
export declare function createOAuth2Tool(provider: string, prefix?: string): ToolConfig<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>, z.ZodObject<{
    authUrl: z.ZodString;
}, "strip", z.ZodTypeAny, {
    authUrl?: string;
}, {
    authUrl?: string;
}>>;
