import { OAuth2ProviderConfig, OAuth2Tokens, OAuth2TokenStoreAdapter } from "./types";
interface StateData {
    agentId: string;
    provider: string;
    timestamp: number;
    codeVerifier?: string;
}
export declare class OAuth2Handler {
    private readonly providers;
    private readonly privateKey;
    private readonly baseUrl;
    private readonly tokenStore;
    constructor(privateKey: string, baseUrl: string, tokenStore?: OAuth2TokenStoreAdapter);
    registerProvider(name: string, config: OAuth2ProviderConfig): void;
    private generateCodeVerifier;
    private generateCodeChallenge;
    generateAuthUrl(provider: string, agentId: string): Promise<string>;
    handleCallback(code: string, state: string): Promise<{
        agentId: string;
        provider: string;
        tokens: OAuth2Tokens;
    }>;
    exchangeCodeForTokens(code: string, config: OAuth2ProviderConfig, provider: string, codeVerifier?: string): Promise<OAuth2Tokens>;
    encodeState(data: StateData): Promise<string>;
    decodeState(state: string): Promise<StateData>;
    hasValidTokens(provider: string, agentId: string): Promise<boolean>;
    getProviders(agentId: string): Promise<Array<{
        name: string;
        config: Omit<OAuth2ProviderConfig, 'clientSecret' | 'onSuccess'>;
        connected: boolean;
    }>>;
}
export {};
