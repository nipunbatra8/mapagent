"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemoryProcessStore = exports.RedisProcessStore = exports.ProcessHandler = exports.createOAuth2Tool = exports.CoreUtils = exports.createToolbox = exports.createService = exports.createTool = void 0;
exports.defineDAINService = defineDAINService;
const tslib_1 = require("tslib");
const service_1 = require("./service");
const core_1 = require("./core");
Object.defineProperty(exports, "createTool", { enumerable: true, get: function () { return core_1.createTool; } });
Object.defineProperty(exports, "createService", { enumerable: true, get: function () { return core_1.createService; } });
Object.defineProperty(exports, "createToolbox", { enumerable: true, get: function () { return core_1.createToolbox; } });
Object.defineProperty(exports, "CoreUtils", { enumerable: true, get: function () { return core_1.CoreUtils; } });
Object.defineProperty(exports, "createOAuth2Tool", { enumerable: true, get: function () { return core_1.createOAuth2Tool; } });
const processes_1 = require("./processes");
Object.defineProperty(exports, "ProcessHandler", { enumerable: true, get: function () { return processes_1.ProcessHandler; } });
Object.defineProperty(exports, "RedisProcessStore", { enumerable: true, get: function () { return processes_1.RedisProcessStore; } });
Object.defineProperty(exports, "MemoryProcessStore", { enumerable: true, get: function () { return processes_1.MemoryProcessStore; } });
function defineDAINService(config) {
    const baseService = (0, service_1.createBaseDAINService)(config);
    const startNode = async (options = {
        port: undefined,
    }) => {
        const { port = process.env.PORT ? parseInt(process.env.PORT) : 2022 } = options;
        const { serve } = await Promise.resolve().then(() => tslib_1.__importStar(require("@hono/node-server")));
        const service = baseService.startService();
        try {
            const server = serve({
                fetch: service.fetch,
                port,
            });
            if (config.serverExtensions) {
                config.serverExtensions.forEach((extension) => {
                    extension.connect(service, server);
                });
            }
            console.log(`Server is listening on port ${port} -- Node Environment`);
            console.log(`DAIN Service is running on version ${config.metadata.version}`);
            return {
                address: () => ({ port }),
                shutdown: async () => {
                    console.log("Shutting down DAIN service...");
                    server.close();
                },
                app: service,
                server: server,
            };
        }
        catch (error) {
            if (error instanceof Error && error.message.includes('EADDRINUSE')) {
                const devMessage = process.env.DAIN_DEV
                    ? `\n\nIn development mode, you can start the service with a different port using:\n\n  npm run dev --port ${port + 1}\n`
                    : '';
                throw new Error(`EADDRINUSE\n\nPort ${port} is already in use. Please choose a different port or ensure no other service is running on this port.${devMessage}`);
            }
            throw error; // Re-throw other errors
        }
    };
    return {
        ...baseService,
        startNode,
    };
}
// Re-export all types
tslib_1.__exportStar(require("./types"), exports);
//# sourceMappingURL=nodeService.js.map