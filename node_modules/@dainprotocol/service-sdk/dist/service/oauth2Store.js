"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisOAuth2TokenStore = exports.InMemoryOAuth2TokenStore = void 0;
class InMemoryOAuth2TokenStore {
    tokens;
    constructor() {
        this.tokens = new Map();
    }
    getKey(agentId, provider) {
        return `${agentId}:${provider}`;
    }
    async saveTokens(agentId, provider, tokens) {
        const key = this.getKey(agentId, provider);
        this.tokens.set(key, tokens);
    }
    async getTokens(agentId, provider) {
        const key = this.getKey(agentId, provider);
        return this.tokens.get(key) || null;
    }
    async hasValidTokens(agentId, provider) {
        const tokens = await this.getTokens(agentId, provider);
        console.log("Checking tokens for", { agentId, provider, tokens });
        return tokens !== null;
    }
    async deleteTokens(agentId, provider) {
        const key = this.getKey(agentId, provider);
        this.tokens.delete(key);
    }
}
exports.InMemoryOAuth2TokenStore = InMemoryOAuth2TokenStore;
// Example Redis adapter
class RedisOAuth2TokenStore {
    redis;
    prefix;
    constructor(redis, prefix = 'oauth2:') {
        this.redis = redis;
        this.prefix = prefix;
    }
    getKey(agentId, provider) {
        return `${this.prefix}${agentId}:${provider}`;
    }
    async saveTokens(agentId, provider, tokens) {
        const key = this.getKey(agentId, provider);
        await this.redis.set(key, JSON.stringify({
            ...tokens,
            createdAt: Date.now()
        }));
    }
    async getTokens(agentId, provider) {
        const key = this.getKey(agentId, provider);
        const data = await this.redis.get(key);
        return data ? JSON.parse(data) : null;
    }
    async hasValidTokens(agentId, provider) {
        const tokens = await this.getTokens(agentId, provider);
        if (!tokens)
            return false;
        return true;
    }
    async deleteTokens(agentId, provider) {
        const key = this.getKey(agentId, provider);
        await this.redis.del(key);
    }
}
exports.RedisOAuth2TokenStore = RedisOAuth2TokenStore;
//# sourceMappingURL=oauth2Store.js.map