"use strict";
// File: src/service/lib/convertToVercelTool.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertHttpToolToVercelAITool = convertHttpToolToVercelAITool;
const zod_1 = require("zod");
function convertHttpToolToVercelAITool(httpTool) {
    return {
        name: httpTool.id,
        description: httpTool.description,
        parameters: convertSchemaToZod(httpTool.inputSchema),
        returnSchema: convertSchemaToZod(httpTool.outputSchema),
    };
}
function convertSchemaToZod(schema) {
    switch (schema.type) {
        case "ZodObject":
            const shape = {};
            for (const [key, value] of Object.entries(schema.shape)) {
                shape[key] = convertSchemaToZod(value);
            }
            return zod_1.z.object(shape).describe(schema.description || "");
        case "ZodString":
            return zod_1.z.string().describe(schema.description || "");
        case "ZodNumber":
            return zod_1.z.number().describe(schema.description || "");
        case "ZodBoolean":
            return zod_1.z.boolean().describe(schema.description || "");
        case "ZodArray":
            return zod_1.z.array(convertSchemaToZod(schema.element)).describe(schema.description || "");
        case "ZodEnum":
            return zod_1.z.enum(schema.values).describe(schema.description || "");
        case "ZodUnion":
            return zod_1.z.union(schema.options.map((option) => convertSchemaToZod(option))).describe(schema.description || "");
        case "ZodOptional":
            return convertSchemaToZod(schema.innerType).optional().describe(schema.description || "");
        case "ZodNullable":
            return convertSchemaToZod(schema.innerType).nullable().describe(schema.description || "");
        case "ZodRecord":
            return zod_1.z.record(convertSchemaToZod(schema.keyType), convertSchemaToZod(schema.valueType)).describe(schema.description || "");
        case "ZodLiteral":
            return zod_1.z.literal(schema.value).describe(schema.description || "");
        case "ZodTuple":
            return zod_1.z.tuple(schema.items.map((item) => convertSchemaToZod(item))).describe(schema.description || "");
        case "ZodIntersection":
            return zod_1.z.intersection(convertSchemaToZod(schema.left), convertSchemaToZod(schema.right)).describe(schema.description || "");
        case "ZodDiscriminatedUnion":
            return zod_1.z.discriminatedUnion(schema.discriminator, schema.options.map((option) => convertSchemaToZod(option))).describe(schema.description || "");
        case "ZodDefault":
            return convertSchemaToZod(schema.innerType)
                .default(schema.defaultValue)
                .describe(schema.description || "");
        // Add other cases as needed
        default:
            return zod_1.z.any().describe(schema.description || "Unknown type");
    }
}
//# sourceMappingURL=convertToVercelTool.js.map