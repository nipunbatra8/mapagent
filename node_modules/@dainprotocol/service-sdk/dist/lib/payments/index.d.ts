import { Keypair, PublicKey } from "@solana/web3.js";
export type PaymentMethod = "crypto" | "stripe";
export interface BaseCreatePaymentIntentParams {
    amount: number;
    description: string;
    paymentMethod: PaymentMethod;
}
export interface CryptoCreatePaymentIntentParams extends BaseCreatePaymentIntentParams {
    paymentMethod: "crypto";
}
export interface StripeCreatePaymentIntentParams extends BaseCreatePaymentIntentParams {
    paymentMethod: "stripe";
}
export type CreatePaymentIntentParams = CryptoCreatePaymentIntentParams | StripeCreatePaymentIntentParams;
export interface BaseCheckPaidParams {
    paymentMethod: PaymentMethod;
}
export interface CryptoCheckPaidParams extends BaseCheckPaidParams {
    paymentMethod: "crypto";
    paymentIntentAddress: string;
}
export interface StripeCheckPaidParams extends BaseCheckPaidParams {
    paymentMethod: "stripe";
    intentId: string;
}
export type CheckPaidParams = CryptoCheckPaidParams | StripeCheckPaidParams;
export interface BasePayParams {
    paymentMethod: PaymentMethod;
}
export interface CryptoPayParams extends BasePayParams {
    paymentMethod: "crypto";
    paymentIntentAddress: string;
}
export interface StripePayParams extends BasePayParams {
    paymentMethod: "stripe";
    intentId: string;
    clientSecret: string;
}
export type PayParams = CryptoPayParams | StripePayParams;
export interface BasePaymentIntent {
    amount: number;
    description: string;
    paymentMethod: PaymentMethod;
}
export interface CryptoPaymentIntent extends BasePaymentIntent {
    paymentMethod: "crypto";
    paymentIntentAddress: string;
}
export interface StripePaymentIntent extends BasePaymentIntent {
    paymentMethod: "stripe";
    publishableKey: string;
    clientSecret: string;
    intentId: string;
}
export type PaymentIntent = CryptoPaymentIntent | StripePaymentIntent;
export interface DAINServicePaymentsConfig {
    keypairOrApiKey: Keypair | string;
    smartAccountAddress?: PublicKey;
    stripeSecretKey?: string;
    stripePublishableKey?: string;
}
export declare class DAINServicePayments {
    private keypair;
    private smartAccountAddress?;
    private stripe?;
    private stripePublishableKey?;
    constructor(config: DAINServicePaymentsConfig);
    createPaymentIntent(params: CreatePaymentIntentParams): Promise<PaymentIntent>;
    checkPaid(params: CheckPaidParams): Promise<boolean>;
    static pay(params: PayParams): Promise<boolean>;
}
export declare const createDAINServicePayments: (config: DAINServicePaymentsConfig) => DAINServicePayments;
