"use strict";
//File: src/lib/schemaStructure.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSchemaTypeName = getSchemaTypeName;
exports.getDetailedSchemaStructure = getDetailedSchemaStructure;
const zod_1 = require("zod");
function getSchemaTypeName(schema) {
    if (schema instanceof zod_1.z.ZodDefault)
        return "ZodDefault";
    if (schema instanceof zod_1.z.ZodOptional)
        return "ZodOptional";
    if (schema instanceof zod_1.z.ZodNullable)
        return "ZodNullable";
    if (schema instanceof zod_1.z.ZodArray)
        return "ZodArray";
    if (schema instanceof zod_1.z.ZodEnum)
        return "ZodEnum";
    if (schema instanceof zod_1.z.ZodUnion)
        return "ZodUnion";
    if (schema instanceof zod_1.z.ZodObject)
        return "ZodObject";
    if (schema instanceof zod_1.z.ZodString)
        return "ZodString";
    if (schema instanceof zod_1.z.ZodNumber)
        return "ZodNumber";
    if (schema instanceof zod_1.z.ZodBoolean)
        return "ZodBoolean";
    if (schema instanceof zod_1.z.ZodLiteral)
        return "ZodLiteral";
    if (schema instanceof zod_1.z.ZodTuple)
        return "ZodTuple";
    if (schema instanceof zod_1.z.ZodIntersection)
        return "ZodIntersection";
    if (schema instanceof zod_1.z.ZodDiscriminatedUnion)
        return "ZodDiscriminatedUnion";
    // Add more type checks as needed
    return "Unknown";
}
function getDetailedSchemaStructure(schema) {
    const typeName = getSchemaTypeName(schema);
    const baseInfo = {
        type: typeName,
        description: schema.description,
    };
    switch (typeName) {
        case "ZodObject":
            return {
                ...baseInfo,
                shape: Object.fromEntries(Object.entries(schema.shape).map(([key, value]) => [
                    key,
                    getDetailedSchemaStructure(value),
                ])),
            };
        case "ZodArray":
            return {
                ...baseInfo,
                element: getDetailedSchemaStructure(schema.element),
            };
        case "ZodEnum":
            return {
                ...baseInfo,
                values: schema.options,
            };
        case "ZodUnion":
            return {
                ...baseInfo,
                options: schema.options.map((option) => getDetailedSchemaStructure(option)),
            };
        case "ZodOptional":
            return {
                ...baseInfo,
                innerType: getDetailedSchemaStructure(schema._def.innerType),
            };
        case "ZodNullable":
            return {
                ...baseInfo,
                innerType: getDetailedSchemaStructure(schema._def.innerType),
            };
        case "ZodLiteral":
            return {
                ...baseInfo,
                value: schema.value,
            };
        case "ZodTuple":
            return {
                ...baseInfo,
                items: schema.items.map((item) => getDetailedSchemaStructure(item)),
            };
        case "ZodIntersection":
            return {
                ...baseInfo,
                left: getDetailedSchemaStructure(schema._def.left),
                right: getDetailedSchemaStructure(schema._def.right),
            };
        case "ZodDiscriminatedUnion":
            return {
                ...baseInfo,
                discriminator: schema
                    .discriminator,
                options: schema.options.map((option) => getDetailedSchemaStructure(option)),
            };
        case "ZodDefault":
            return {
                ...baseInfo,
                innerType: getDetailedSchemaStructure(schema._def.innerType),
                defaultValue: schema._def.defaultValue(),
            };
        default:
            return baseInfo;
    }
}
//# sourceMappingURL=schemaStructure.js.map