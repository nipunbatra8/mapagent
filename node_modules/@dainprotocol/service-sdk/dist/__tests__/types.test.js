"use strict";
// File: src/__tests__/types.test.ts
Object.defineProperty(exports, "__esModule", { value: true });
const zod_1 = require("zod");
describe("DAIN Framework Types", () => {
    test("AgentInfo type is correctly defined", () => {
        const agentInfo = {
            agentId: "test-agent",
            address: "0x1234567890123456789012345678901234567890",
            smartAccountPDA: "1234567890123456789012345678901234567890",
            id: "dain_id_1234567890123456789012345678901234567890",
        };
        expect(agentInfo.agentId).toBe("test-agent");
        expect(agentInfo.address).toBe("0x1234567890123456789012345678901234567890");
    });
    test("PricingInfo type is correctly defined", () => {
        const pricingInfo = {
            pricePerUse: 0.01,
            currency: "USD",
        };
        expect(pricingInfo.pricePerUse).toBe(0.01);
        expect(pricingInfo.currency).toBe("USD");
    });
    test("ToolConfig type is correctly defined", () => {
        const toolConfig = {
            id: "get-weather",
            name: "Get Weather",
            description: "Fetches weather for a city",
            input: zod_1.z.object({ city: zod_1.z.string() }),
            output: zod_1.z.object({ temperature: zod_1.z.number() }),
            pricing: { pricePerUse: 0.01, currency: "USD" },
            handler: async (input, agentInfo) => ({
                text: `The temperature is 25Â°C`,
                data: { temperature: 25 },
                ui: null
            }),
        };
        expect(toolConfig.id).toBe("get-weather");
        expect(toolConfig.input.shape.city).toBeInstanceOf(zod_1.z.ZodString);
        expect(toolConfig.output.shape.temperature).toBeInstanceOf(zod_1.z.ZodNumber);
    });
    test("ServiceConfig type is correctly defined", () => {
        const serviceConfig = {
            id: "weather-service",
            name: "Weather Service",
            description: "Provides weather information",
            metadata: {
                capabilities: ["current-weather", "forecast"],
                languages: ["en", "es"],
            },
            recommendedPrompt: "Ask about the weather",
            recommendedTools: ["get-weather", "get-forecast"],
        };
        expect(serviceConfig.id).toBe("weather-service");
        expect(serviceConfig.metadata.capabilities).toContain("current-weather");
        expect(serviceConfig.recommendedTools).toContain("get-weather");
    });
    test("ToolboxConfig type is correctly defined", () => {
        const toolboxConfig = {
            id: "weather-toolbox",
            name: "Weather Toolbox",
            description: "Collection of weather tools",
            tools: ["get-weather", "get-forecast"],
            metadata: {
                complexity: "Low",
                applicableFields: ["Meteorology", "Travel"],
            },
            recommendedPrompt: "Use these tools for weather-related tasks",
        };
        expect(toolboxConfig.id).toBe("weather-toolbox");
        expect(toolboxConfig.tools).toContain("get-weather");
        expect(toolboxConfig.metadata.applicableFields).toContain("Meteorology");
    });
    test("DAINServiceConfig type is correctly defined", () => {
        const serviceConfig = {
            metadata: {
                title: "Weather Service",
                description: "Provides weather information",
                version: "1.0.0",
                author: "DAIN Developer",
                tags: ["weather", "forecast"],
            },
            identity: {
                publicKey: "test-public-key",
                agentId: "weather-agent",
                orgId: "weather-org",
                privateKey: "test-private",
            },
            services: [],
            tools: [],
            toolboxes: [],
            contexts: [],
        };
        expect(serviceConfig.metadata.title).toBe("Weather Service");
        expect(serviceConfig.identity.agentId).toBe("weather-agent");
    });
});
//# sourceMappingURL=types.test.js.map