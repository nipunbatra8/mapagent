"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const zod_1 = require("zod");
const schemaStructure_1 = require("../lib/schemaStructure");
const convertToVercelTool_1 = require("../lib/convertToVercelTool");
describe('Optional and default types conversion', () => {
    it('should correctly convert optional and default types to Vercel AI Tool parameters', () => {
        // Define a schema with optional fields and default values
        const testSchema = zod_1.z.object({
            requiredField: zod_1.z.string(),
            optionalString: zod_1.z.string().optional(),
            optionalNumberWithDefault: zod_1.z.number().optional().default(42),
            optionalBoolean: zod_1.z.boolean().optional(),
            defaultString: zod_1.z.string().default('default value'),
            nestedOptional: zod_1.z.object({
                innerOptional: zod_1.z.string().optional(),
                innerDefault: zod_1.z.number().default(10)
            }).optional()
        });
        // Create a mock HTTP tool
        const httpTool = {
            id: 'test-optional-default-tool',
            name: 'Test Optional and Default Tool',
            description: 'A tool to test optional and default field conversion',
            inputSchema: (0, schemaStructure_1.getDetailedSchemaStructure)(testSchema),
            outputSchema: { type: 'ZodAny' }
        };
        // Convert the HTTP tool to a Vercel AI Tool
        const vercelAITool = (0, convertToVercelTool_1.convertHttpToolToVercelAITool)(httpTool);
        // Check if the conversion was successful
        expect(vercelAITool.name).toBe('test-optional-default-tool');
        expect(vercelAITool.description).toBe('A tool to test optional and default field conversion');
        expect(vercelAITool.parameters).toBeInstanceOf(zod_1.z.ZodObject);
        // Check if the fields are correctly converted
        const schemaShape = vercelAITool.parameters._def.shape();
        expect(schemaShape.requiredField).toBeInstanceOf(zod_1.z.ZodString);
        expect(schemaShape.optionalString).toBeInstanceOf(zod_1.z.ZodOptional);
        expect(schemaShape.optionalBoolean).toBeInstanceOf(zod_1.z.ZodOptional);
        // Update for fields with default values
        expect(schemaShape.optionalNumberWithDefault).toBeInstanceOf(zod_1.z.ZodDefault);
        expect(schemaShape.optionalNumberWithDefault._def.innerType).toBeInstanceOf(zod_1.z.ZodOptional);
        expect(schemaShape.optionalNumberWithDefault._def.innerType._def.innerType).toBeInstanceOf(zod_1.z.ZodNumber);
        expect(schemaShape.defaultString).toBeInstanceOf(zod_1.z.ZodDefault);
        expect(schemaShape.defaultString._def.innerType).toBeInstanceOf(zod_1.z.ZodString);
        expect(schemaShape.nestedOptional).toBeInstanceOf(zod_1.z.ZodOptional);
        // Check nested fields
        const nestedShape = schemaShape.nestedOptional._def.innerType._def.shape();
        expect(nestedShape.innerOptional).toBeInstanceOf(zod_1.z.ZodOptional);
        expect(nestedShape.innerDefault).toBeInstanceOf(zod_1.z.ZodDefault);
        expect(nestedShape.innerDefault._def.innerType).toBeInstanceOf(zod_1.z.ZodNumber);
        // Test parsing with the converted schema
        const validInput = {
            requiredField: 'test',
            optionalString: 'optional',
            nestedOptional: {
                innerOptional: 'nested'
            }
        };
        const parseResult = vercelAITool.parameters.safeParse(validInput);
        expect(parseResult.success).toBe(true);
        // Test parsing with missing optional fields and check default values
        const minimalInput = {
            requiredField: 'test'
        };
        const minimalParseResult = vercelAITool.parameters.safeParse(minimalInput);
        expect(minimalParseResult.success).toBe(true);
        if (minimalParseResult.success) {
            expect(minimalParseResult.data.optionalNumberWithDefault).toBe(42);
            expect(minimalParseResult.data.defaultString).toBe('default value');
        }
        // Test nested default values
        const nestedInput = {
            requiredField: 'test',
            nestedOptional: {}
        };
        const nestedParseResult = vercelAITool.parameters.safeParse(nestedInput);
        expect(nestedParseResult.success).toBe(true);
        if (nestedParseResult.success) {
            expect(nestedParseResult.data.nestedOptional?.innerDefault).toBe(10);
        }
    });
});
//# sourceMappingURL=testOptionals.test.js.map