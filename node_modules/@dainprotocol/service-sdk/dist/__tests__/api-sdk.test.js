"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const api_sdk_1 = require("../client/api-sdk");
const client_auth_1 = require("../client/client-auth");
const ed25519_1 = require("@noble/curves/ed25519");
const bs58_1 = tslib_1.__importDefault(require("bs58"));
const nodeService_1 = require("../service/nodeService");
const zod_1 = require("zod");
describe("DainSDK", () => {
    const privateKey = ed25519_1.ed25519.utils.randomPrivateKey();
    const publicKey = ed25519_1.ed25519.getPublicKey(privateKey);
    const clientPrivateKey = ed25519_1.ed25519.utils.randomPrivateKey();
    const agentAuth = new client_auth_1.DainClientAuth({
        privateKeyBase58: bs58_1.default.encode(clientPrivateKey),
        agentId: "agent-12",
        orgId: "org-12",
    });
    // Create test tools with different schema types
    const simpleTestTool = (0, nodeService_1.createTool)({
        id: "simple-test-tool",
        name: "my-test-tool-name",
        description: "Test tool with simple types",
        input: zod_1.z.object({
            stringParam: zod_1.z.string().describe("A string parameter"),
            numberParam: zod_1.z.number().describe("A number parameter"),
            booleanParam: zod_1.z.boolean().describe("A boolean parameter"),
            optionalParam: zod_1.z.string().optional().describe("An optional parameter"),
            enumParam: zod_1.z.enum(["option1", "option2", "option3"]).describe("An enum parameter"),
        }),
        output: zod_1.z.object({ result: zod_1.z.string() }),
        pricing: { pricePerUse: 0.01, currency: "USD" },
        handler: async ({ stringParam }) => ({
            text: `Processed: ${stringParam}`,
            data: { result: `Processed: ${stringParam}` },
            ui: null,
        }),
    });
    const complexTestTool = (0, nodeService_1.createTool)({
        id: "complex-test-tool",
        name: "complex-tool-name",
        description: "Test tool with complex types",
        input: zod_1.z.object({
            arrayParam: zod_1.z.array(zod_1.z.string()).describe("Array of strings"),
            objectParam: zod_1.z.object({
                nested: zod_1.z.number(),
                deeplyNested: zod_1.z.object({
                    value: zod_1.z.boolean(),
                }),
            }).describe("Nested object"),
            unionParam: zod_1.z.union([
                zod_1.z.string(),
                zod_1.z.number(),
            ]).describe("String or number"),
            recordParam: zod_1.z.record(zod_1.z.string(), zod_1.z.number()).describe("Record of numbers"),
            defaultParam: zod_1.z.string().default("default value"),
        }),
        output: zod_1.z.object({ result: zod_1.z.string() }),
        pricing: { pricePerUse: 0.01, currency: "USD" },
        handler: async () => ({
            text: "Processed complex input",
            data: { result: "Processed complex input" },
            ui: null,
        }),
    });
    // Create test service with both tools
    const dainService = (0, nodeService_1.defineDAINService)({
        metadata: {
            title: "Test DAIN Service",
            description: "A test DAIN service",
            version: "1.0.0",
            author: "Test Author",
            tags: ["test"],
        },
        identity: {
            publicKey: bs58_1.default.encode(publicKey),
            agentId: "test-agent",
            orgId: "test-org",
            privateKey: bs58_1.default.encode(privateKey),
        },
        tools: [simpleTestTool, complexTestTool],
    });
    let server;
    let sdk;
    beforeAll(async () => {
        server = await dainService.startNode({ port: 3081 });
        sdk = new api_sdk_1.DainSDK("http://localhost:3081", agentAuth);
        await sdk.initialize();
    });
    afterAll(async () => {
        if (server) {
            await server.shutdown();
        }
    });
    describe("Docs tests not implemented yet - THIS NEEDS TO BE CREATED", () => {
        it("Docs output- THIS NEEDS TO BE CREATED", async () => {
            const docs = await sdk.getDocumentation();
            expect(docs.length).toBeGreaterThan(0);
        });
    });
});
//# sourceMappingURL=api-sdk.test.js.map