import { Hono } from "hono";
import { ServerType } from "@hono/node-server";
import { TelegramClient } from "telegram";
import { Redis } from "ioredis";
import { OAuth2ProviderConfig } from "@/service/types";
import { OAuth2Tokens } from "@/service";
export interface AuthSession {
    id: string;
    clientId: string;
    redirectUri: string;
    state: string;
    telegramSession?: string;
    status: "pending" | "awaiting_phone" | "awaiting_code" | "awaiting_password" | "completed";
    createdAt: Date;
    expiresAt: Date;
    wsConnection?: any;
    telegramClient?: TelegramClient;
    currentPromiseResolve?: (value: string) => void;
}
export interface TelegramOAuthConfig {
    apiId: number;
    apiHash: string;
    redis: Redis;
    clientSecret?: string;
    baseUrl: string;
}
export declare class TelegramOAuth {
    private config;
    private wss;
    private redis;
    private baseUrl;
    constructor(config: TelegramOAuthConfig);
    static generateClientId(appId: number, appHash: string): string;
    static generateClientSecret(appId: number, appHash: string): string;
    private validateClient;
    private getSession;
    private setSession;
    private getToken;
    private setToken;
    private deleteToken;
    private setupWebSocketServer;
    private promptUser;
    connect(app: Hono, server: ServerType): void;
    getClientCredentials(): {
        clientId: string;
        clientSecret: string;
    };
    getOAuth2ProviderConfig(options?: {
        reason?: string;
        requiredTools?: string[];
        onSuccess?: (agentId: string, tokens: OAuth2Tokens) => Promise<void>;
    }): OAuth2ProviderConfig;
}
