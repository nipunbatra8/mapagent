import { CoreTool } from "ai";
import { DainClientAuth } from "./client-auth";
import { ServiceMetadata, ServiceConfig, ToolboxConfig, ToolConfig, ServiceContext, ServiceContextWithData, ToolWithJsonSchema, ServicePinnable, ServicePinnableWithWidget, OAuth2ProviderInfo, ExampleQueries, HumanActionStep } from "./types";
export type { ServiceMetadata, ServiceConfig, ToolboxConfig, ToolConfig };
export declare class DainServiceConnection {
    private baseUrl;
    private clientAuth;
    constructor(baseUrl: string, clientAuth: DainClientAuth);
    makeRequest(method: string, path: string, body?: any): Promise<any>;
    getMetadata(): Promise<ServiceMetadata>;
    getExampleQueries(): Promise<ExampleQueries>;
    getServices(): Promise<ServiceConfig[]>;
    getToolboxes(): Promise<ToolboxConfig[]>;
    getToolbox(toolboxId: string): Promise<ToolboxConfig>;
    getTools(): Promise<ToolConfig[]>;
    getTool(toolId: string): Promise<ToolConfig>;
    getContexts(): Promise<ServiceContext[]>;
    getContext(contextId: string): Promise<ServiceContextWithData>;
    getAllContexts(): Promise<ServiceContextWithData[]>;
    getPinnables(): Promise<ServicePinnable[]>;
    getPinnable(pinnableId: string): Promise<ServicePinnableWithWidget>;
    getAllPinnables(): Promise<ServicePinnableWithWidget[]>;
    getAllToolsAsJsonSchema(): Promise<{
        tools: ToolWithJsonSchema[];
        reccomendedPrompts: string[];
    }>;
    loadToolbox(toolboxId: string, execute?: boolean): Promise<Record<string, CoreTool>>;
    createVercelAITool(toolInfo: ToolConfig): CoreTool;
    callTool(toolId: string, params: any, options?: {
        onUIUpdate?: (update: {
            ui: any;
        }) => void;
        onProcess?: (processId: string) => void;
    }): Promise<any>;
    callToolAndGetNewContext(toolId: string, params: any, options?: {
        onUIUpdate?: (update: {
            ui: any;
        }) => void;
        onProcess?: (processId: string) => void;
    }): Promise<{
        toolResult: any;
        context: ServiceContextWithData[];
    }>;
    createVercelAIToolWithoutExecute(toolInfo: ToolConfig): CoreTool;
    private convertSchemaToZod;
    getProcessStatus(processId: string): Promise<{
        id: string;
        status: "running" | "completed" | "failed";
        updates: {
            percentage?: number;
            text: string;
            createdAt: Date;
        }[];
        results: {
            text: string;
            data: any;
            ui?: any;
        }[];
    } | null>;
    getOAuth2Providers(): Promise<OAuth2ProviderInfo[]>;
    getOAuth2ConnectUrl(provider: string): Promise<string>;
    getProcessHumanActions(processId: string): Promise<HumanActionStep[]>;
    getHumanAction(processId: string, stepId: string): Promise<{
        status: 'pending' | 'completed' | 'failed' | 'timeout';
        response?: {
            actionId: string;
            responseText?: string;
            data?: any;
        };
    }>;
    respondToHumanAction(processId: string, stepId: string, actionId: string, responseText?: string, data?: any): Promise<{
        success: boolean;
    }>;
    getToolConfirmation(toolId: string, input: any): Promise<{
        success: boolean;
        ui?: any;
    }>;
}
