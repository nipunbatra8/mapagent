import { DainClientAuth } from './client-auth';
import type { ServiceMetadata, ToolConfig, OAuth2ProviderInfo } from './types';
import { z } from 'zod';
type ToolMethod<T extends z.ZodType, U extends z.ZodType> = (params: z.infer<T>) => Promise<{
    data: z.infer<U>;
    text: string;
    ui: any;
}>;
type ToolMethods<T extends Record<string, ToolConfig>> = {
    [K in keyof T]: ToolMethod<z.ZodType<any>, z.ZodType<any>>;
};
export declare class DainSDK {
    private connection;
    private toolsCache;
    private metadata?;
    private oauthProvidersCache;
    constructor(baseUrl: string, auth: DainClientAuth);
    /**
     * Initializes the SDK by loading all tools and metadata.
     * This must be called before using any tool methods.
     * @throws {Error} If the connection fails or service is unavailable
     */
    initialize(): Promise<this & ToolMethods<Record<string, ToolConfig>>>;
    /**
     * Returns comprehensive documentation for all available tools and services
     * @returns {Promise<string>} Markdown formatted documentation
     */
    getDocumentation(): Promise<string>;
    /**
     * Returns the raw schema documentation for a specific tool
     * @param toolId The ID of the tool
     */
    getToolSchema(toolId: string): Promise<{
        input: z.ZodType;
        output: z.ZodType;
        description: string;
    }>;
    private generateSchemaDocumentation;
    private generateExampleParams;
    private sanitizeMethodName;
    private generateToolMethods;
    /**
     * Returns the metadata about the connected service
     */
    getServiceInfo(): ServiceMetadata | undefined;
    /**
     * Returns all available tool configurations
     */
    getAvailableTools(): ToolConfig[];
    /**
     * Gets information about all available OAuth providers and their connection status
     * @returns List of OAuth providers with their connection status
     */
    getOAuthProviders(): Promise<OAuth2ProviderInfo[]>;
    /**
     * Gets an authentication URL for connecting with a specific OAuth provider
     * @param provider The name of the OAuth provider
     * @returns URL to initiate OAuth flow
     */
    getOAuthConnectUrl(provider: string): Promise<string>;
    /**
     * Checks if a tool requires specific OAuth connections and returns requirements
     * @param toolId The ID of the tool to check
     * @returns Required OAuth connections and their status
     */
    getToolOAuthRequirements(toolId: string): Promise<{
        required: boolean;
        providers: {
            name: string;
            reason?: string;
            connected: boolean;
        }[];
    }>;
    private generateExampleFromJsonSchema;
    private jsonSchemaToTypeScript;
    private generateTypedExample;
    private getExampleValue;
}
export {};
