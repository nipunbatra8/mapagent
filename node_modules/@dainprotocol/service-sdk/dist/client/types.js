"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HumanActionStepSchema = exports.ExampleQueriesSchema = exports.ExampleQuerySchema = exports.OAuth2ProviderInfoSchema = exports.ServicePinnableWithWidgetSchema = exports.ServicePinnableSchema = exports.GetAllToolsAsJsonSchemaResponseSchema = exports.ToolWithJsonSchemaSchema = exports.ServiceContextWithDataSchema = exports.ServiceContextSchema = exports.ToolConfigSchema = exports.ToolboxConfigSchema = exports.ServiceConfigSchema = exports.MetadataSchema = exports.PricingInfoSchema = void 0;
const zod_1 = require("zod");
// Define and export types for DAIN service responses
exports.PricingInfoSchema = zod_1.z.object({
    pricePerUse: zod_1.z.number(),
    currency: zod_1.z.string(),
});
exports.MetadataSchema = zod_1.z.object({
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    version: zod_1.z.string(),
    logo: zod_1.z.string().optional(),
    author: zod_1.z.string(),
    tags: zod_1.z.array(zod_1.z.string()),
});
exports.ServiceConfigSchema = zod_1.z.object({
    id: zod_1.z.string(),
    name: zod_1.z.string(),
    description: zod_1.z.string(),
    metadata: zod_1.z.object({
        capabilities: zod_1.z.array(zod_1.z.string()),
        languages: zod_1.z.array(zod_1.z.string()),
    }),
    recommendedPrompt: zod_1.z.string(),
    recommendedTools: zod_1.z.array(zod_1.z.string()),
});
exports.ToolboxConfigSchema = zod_1.z.object({
    id: zod_1.z.string(),
    name: zod_1.z.string(),
    description: zod_1.z.string(),
    tools: zod_1.z.array(zod_1.z.string()),
    metadata: zod_1.z.object({
        complexity: zod_1.z.string(),
        applicableFields: zod_1.z.array(zod_1.z.string()),
    }),
    recommendedPrompt: zod_1.z.string(),
});
exports.ToolConfigSchema = zod_1.z.object({
    id: zod_1.z.string(),
    name: zod_1.z.string(),
    description: zod_1.z.string(),
    pricing: exports.PricingInfoSchema.default({ pricePerUse: 0, currency: "USD" }),
    inputSchema: zod_1.z.any(), // This will be parsed separately
    outputSchema: zod_1.z.any(), // This will be parsed separately
    suggestConfirmation: zod_1.z.boolean().optional(),
    suggestConfirmationUISchema: zod_1.z.any().optional(), // The UI schema will be handled separately
});
exports.ServiceContextSchema = zod_1.z.object({
    id: zod_1.z.string(),
    name: zod_1.z.string(),
    description: zod_1.z.string(),
});
exports.ServiceContextWithDataSchema = exports.ServiceContextSchema.extend({
    data: zod_1.z.any(),
});
exports.ToolWithJsonSchemaSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    name: zod_1.z.string().optional(),
    description: zod_1.z.string().optional(),
    parameters: zod_1.z.any(),
    outputSchema: zod_1.z.any(),
    inputSchema: zod_1.z.any().optional(),
    suggestConfirmation: zod_1.z.boolean().optional(),
    suggestConfirmationUISchema: zod_1.z.any().optional(),
});
exports.GetAllToolsAsJsonSchemaResponseSchema = zod_1.z.object({
    tools: zod_1.z.array(exports.ToolWithJsonSchemaSchema),
    reccomendedPrompts: zod_1.z.array(zod_1.z.string()),
});
exports.ServicePinnableSchema = zod_1.z.object({
    id: zod_1.z.string(),
    type: zod_1.z.enum(["button", "widget"]),
    label: zod_1.z.string(),
    name: zod_1.z.string(),
    description: zod_1.z.string(),
    icon: zod_1.z.string(),
    size: zod_1.z.enum(["small", "large"]).optional().default("large"),
});
exports.ServicePinnableWithWidgetSchema = exports.ServicePinnableSchema.extend({
    widget: zod_1.z.object({
        text: zod_1.z.string().optional(),
        data: zod_1.z.any().optional(),
        ui: zod_1.z.any().optional(),
    }),
});
// Add these new schemas
exports.OAuth2ProviderInfoSchema = zod_1.z.object({
    name: zod_1.z.string(),
    config: zod_1.z.object({
        clientId: zod_1.z.string(),
        authorizationUrl: zod_1.z.string(),
        tokenUrl: zod_1.z.string(),
        scopes: zod_1.z.array(zod_1.z.string()),
        reason: zod_1.z.string().optional(),
        requiredTools: zod_1.z.array(zod_1.z.string()).optional()
    }),
    connected: zod_1.z.boolean()
});
exports.ExampleQuerySchema = zod_1.z.object({
    category: zod_1.z.string(),
    queries: zod_1.z.array(zod_1.z.string()),
});
exports.ExampleQueriesSchema = zod_1.z.array(exports.ExampleQuerySchema);
// Add these schemas
exports.HumanActionStepSchema = zod_1.z.object({
    id: zod_1.z.string(),
    processId: zod_1.z.string(),
    message: zod_1.z.string(),
    ui: zod_1.z.any().optional(),
    actions: zod_1.z.array(zod_1.z.object({
        id: zod_1.z.string(),
        title: zod_1.z.string(),
        description: zod_1.z.string().optional(),
        requiresResponse: zod_1.z.boolean().optional(),
        callbackUrl: zod_1.z.string().optional()
    })),
    status: zod_1.z.enum(['pending', 'completed', 'failed', 'timeout']),
    response: zod_1.z.object({
        actionId: zod_1.z.string(),
        responseText: zod_1.z.string().optional(),
        timestamp: zod_1.z.date(),
        data: zod_1.z.any().optional()
    }).optional(),
    createdAt: zod_1.z.date(),
    timeoutAt: zod_1.z.date().optional()
});
//# sourceMappingURL=types.js.map