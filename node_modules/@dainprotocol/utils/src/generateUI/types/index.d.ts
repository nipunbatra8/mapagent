/**
 * The new UI element shape:
 * – type: a string (for example: 'layout', 'card', 'table', etc.)
 * – props: an object with arbitrary properties
 * – children: an array of nested UI elements
 */
export interface BaseUIElement<P = Record<string, unknown>> {
    type: string;
    props: P;
    children: BaseUIElement<any>[];
    renderMode: "inline" | "page";
    actions?: DslAction[];
}
/**
 * Common parameter schema properties shared across all types
 */
export interface CommonParamSchema {
    label?: string;
    description?: string;
    required?: boolean;
    name?: string;
}
export interface StringParamSchema extends CommonParamSchema {
    type: "string";
    enum?: string[];
    default?: string;
    minLength?: number;
    maxLength?: number;
    matches?: string;
    email?: boolean;
    url?: boolean;
    trim?: boolean;
    lowercase?: boolean;
    uppercase?: boolean;
}
export interface NumberParamSchema extends CommonParamSchema {
    type: "number";
    default?: number;
    min?: number;
    max?: number;
    positive?: boolean;
    integer?: boolean;
}
export interface BooleanParamSchema extends CommonParamSchema {
    type: "boolean";
    default?: boolean;
}
export type SingleParamSchema = StringParamSchema | NumberParamSchema | BooleanParamSchema;
export type paramSchema = Record<string, SingleParamSchema>;
export interface DslAction {
    /**
     * The type of action to perform.
     *
     * - "callTool": call a tool
     * - "navigate": navigate to a new page
     * - "prompt": send a message on behalf of the user
     */
    type: "callTool" | "navigate" | "prompt";
    /**
     * The tool to call.
     */
    tool?: string;
    /**
     * If you have a small, custom schema approach, you might do:
     */
    paramSchema?: paramSchema;
    /**
     * For the actual values if already known:
     * (these might be auto-filled from context or from a row click, etc.)
     */
    params?: Record<string, unknown>;
    /**
     * Added key used to identify the action on the front-end
     */
    key: string;
    /**
     * Whether to call the LLM after the tool is called
     */
    shouldCallLLMAfterTool?: boolean;
}
