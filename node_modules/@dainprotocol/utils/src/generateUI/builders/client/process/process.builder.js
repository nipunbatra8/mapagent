"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProcessUIBuilder = void 0;
const __1 = require("../../..");
/**
 * DSL Builder for creating a "Process" UI element.
 */
class ProcessUIBuilder extends __1.DSLBuilder {
    constructor(initialProps, renderMode = "inline") {
        super("process", Object.assign({}, initialProps), renderMode);
    }
    /**
     * Sets the processId.
     */
    setProcessId(processId) {
        this.setProp("processId", processId);
        return this;
    }
    /**
     * Sets the name of the process.
     */
    setName(name) {
        this.setProp("name", name);
        return this;
    }
    /**
     * Sets the description of the process.
     */
    setDescription(description) {
        this.setProp("description", description);
        return this;
    }
    /**
     * Sets the process type, e.g. "one-time" or "recurring".
     */
    setType(type) {
        this.setProp("type", type);
        return this;
    }
    /**
     * Sets the status, such as "running", "completed", or "failed".
     */
    setStatus(status) {
        this.setProp("status", status);
        return this;
    }
    /**
     * Sets the updates array.
     */
    setUpdates(updates) {
        this.setProp("updates", updates);
        return this;
    }
    /**
     * Sets the results array.
     */
    setResults(results) {
        this.setProp("results", results);
        return this;
    }
    /**
     * Sets the service ID if applicable.
     */
    setServiceId(serviceId) {
        this.setProp("serviceId", serviceId);
        return this;
    }
    /**
     * Example of adding a child DSL element (if you want to nest other UI builders).
     */
    withSteps(...children) {
        children.forEach(child => this.addChild(child));
        return this;
    }
    /**
     * Example action: triggered when the process completes.
     */
    onComplete(action) {
        const { tool, params } = action;
        if (!tool) {
            throw new Error("onComplete action must specify a 'tool' (callTool).");
        }
        return this.addAction({
            type: "callTool",
            tool,
            key: "complete-process",
            paramSchema: {},
            params,
        });
    }
}
exports.ProcessUIBuilder = ProcessUIBuilder;
//# sourceMappingURL=process.builder.js.map