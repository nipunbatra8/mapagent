import { BaseUIElement, DSLBuilder, DslAction } from "../../..";
/**
 * Basic shape for each process update.
 */
export interface ProcessUpdate {
    text: string;
    percentage?: number;
    created: string;
}
/**
 * Basic shape for each process result.
 */
export interface ProcessResult {
    result: string;
    created: string;
}
/**
 * Props that define a Process in the DSL.
 */
export interface ProcessProps {
    processId?: string;
    name?: string;
    description?: string;
    type?: "one-time" | "recurring";
    status?: "running" | "completed" | "failed";
    updates?: ProcessUpdate[];
    results?: ProcessResult[];
    serviceId?: string;
    [key: string]: unknown;
}
/**
 * DSL Builder for creating a "Process" UI element.
 */
export declare class ProcessUIBuilder extends DSLBuilder<ProcessProps> {
    constructor(initialProps?: Partial<ProcessProps>, renderMode?: "inline" | "page");
    /**
     * Sets the processId.
     */
    setProcessId(processId: string): this;
    /**
     * Sets the name of the process.
     */
    setName(name: string): this;
    /**
     * Sets the description of the process.
     */
    setDescription(description: string): this;
    /**
     * Sets the process type, e.g. "one-time" or "recurring".
     */
    setType(type: "one-time" | "recurring"): this;
    /**
     * Sets the status, such as "running", "completed", or "failed".
     */
    setStatus(status: "running" | "completed" | "failed"): this;
    /**
     * Sets the updates array.
     */
    setUpdates(updates: ProcessUpdate[]): this;
    /**
     * Sets the results array.
     */
    setResults(results: ProcessResult[]): this;
    /**
     * Sets the service ID if applicable.
     */
    setServiceId(serviceId: string): this;
    /**
     * Example of adding a child DSL element (if you want to nest other UI builders).
     */
    withSteps(...children: BaseUIElement[]): this;
    /**
     * Example action: triggered when the process completes.
     */
    onComplete(action: Exclude<Partial<DslAction>, "type">): this;
}
