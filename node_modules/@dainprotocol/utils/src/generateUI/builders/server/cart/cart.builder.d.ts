import { DSLBuilder } from "../../../base/base.builder";
import { DslAction } from "../../../types";
/**
 * The shape of data that this cart deals with (store info, items, etc.).
 */
export interface CartData {
    storeInfo?: {
        name?: string;
        imageLogo?: string;
    };
    items?: Array<{
        product_id?: string;
        quantity?: number;
        product?: {
            name?: string;
            image?: string;
            price?: number;
        };
    }>;
}
/**
 * DSL builder for creating a "cart" element.
 */
export declare class CartUIBuilder extends DSLBuilder<CartData> {
    constructor(initialProps?: Partial<CartData>, renderMode?: "inline" | "page");
    /**
     * Update/store the store information (name and logo).
     */
    setStoreInfo(storeInfo: NonNullable<CartData["storeInfo"]>): this;
    /**
     * Add a single item to the cart.
     */
    addItem(item: NonNullable<CartData["items"]>[number]): this;
    /**
     * Add multiple items to the cart at once.
     */
    addItems(items: NonNullable<CartData["items"]>): this;
    /**
     * Define an action triggered when the user changes quantity.
     * For example, calls a tool with the key "change-quantity".
     */
    onQuantityChange(action: Exclude<Partial<DslAction>, "type" | "paramSchema">): this;
    /**
     * Define an action triggered on checkout.
     * Uses a simple "checkout-cart" key, following the rule of two words separated by a dash.
     */
    onCheckout(action: Exclude<Partial<DslAction>, "type" | "paramSchema">): this;
    /**
     * Provide DSL children to this cart element.
     */
    withChildren(child: DSLBuilder<any> | ReturnType<DSLBuilder<any>["build"]>): this;
}
