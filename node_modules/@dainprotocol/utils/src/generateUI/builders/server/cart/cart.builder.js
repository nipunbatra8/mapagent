"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CartUIBuilder = void 0;
const base_builder_1 = require("../../../base/base.builder");
/**
 * DSL builder for creating a "cart" element.
 */
class CartUIBuilder extends base_builder_1.DSLBuilder {
    constructor(initialProps, renderMode = "inline") {
        super("cart", Object.assign({ items: [] }, initialProps), renderMode);
    }
    /**
     * Update/store the store information (name and logo).
     */
    setStoreInfo(storeInfo) {
        this.setProp("storeInfo", storeInfo);
        return this;
    }
    /**
     * Add a single item to the cart.
     */
    addItem(item) {
        if (!this.element.props.items) {
            this.element.props.items = [];
        }
        this.element.props.items.push(item);
        return this;
    }
    /**
     * Add multiple items to the cart at once.
     */
    addItems(items) {
        items.forEach((item) => this.addItem(item));
        return this;
    }
    /**
     * Define an action triggered when the user changes quantity.
     * For example, calls a tool with the key "change-quantity".
     */
    onQuantityChange(action) {
        const { tool, params } = action;
        if (!tool) {
            throw new Error("onQuantityChange action must specify a 'tool' (callTool).");
        }
        this.addAction({
            type: "callTool",
            tool,
            params,
            key: "quantity-change",
        });
        return this;
    }
    /**
     * Define an action triggered on checkout.
     * Uses a simple "checkout-cart" key, following the rule of two words separated by a dash.
     */
    onCheckout(action) {
        const { tool, params } = action;
        if (!tool) {
            throw new Error("onCheckout action must specify a 'tool' (callTool).");
        }
        this.addAction({
            type: "callTool",
            tool,
            params,
            key: "checkout",
        });
        return this;
    }
    /**
     * Provide DSL children to this cart element.
     */
    withChildren(child) {
        this.addChild(child);
        return this;
    }
}
exports.CartUIBuilder = CartUIBuilder;
//# sourceMappingURL=cart.builder.js.map