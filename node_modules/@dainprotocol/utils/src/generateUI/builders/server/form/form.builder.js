"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormUIBuilder = void 0;
const tslib_1 = require("tslib");
const base_builder_1 = require("../../../base/base.builder");
/**
 * A DSL builder class that creates a "form" UI element,
 * with dynamic fields and an action onSubmit.
 */
class FormUIBuilder extends base_builder_1.DSLBuilder {
    constructor(initialProps, renderMode = "inline") {
        super("form", Object.assign({ fields: [] }, initialProps), renderMode);
    }
    /**
     * Sets a title for the form.
     */
    title(title) {
        this.setProp("title", title);
        return this;
    }
    /**
     * Sets a description or subtitle for the form.
     */
    description(desc) {
        this.setProp("description", desc);
        return this;
    }
    /**
     * Adds a new field to the form.
     */
    addField(field) {
        this.element.props.fields.push(field);
        return this;
    }
    /**
     * Add multiple fields at once.
     */
    addFields(fields) {
        fields.forEach((f) => this.addField(f));
        return this;
    }
    /**
     * Sets a layout style (purely descriptive; front-end decides how to handle).
     */
    setLayout(layout) {
        this.setProp("layout", layout);
        return this;
    }
    /**
     * Defines the tool/action to be triggered on form submission.
     * Inherits the paramSchema from the defined fields automatically.
     */
    onSubmit(action) {
        const { tool, params } = action;
        if (!tool) {
            throw new Error("onSubmit action must specify a 'tool' (callTool).");
        }
        // Build the paramSchema from form fields
        const paramSchema = {};
        for (const field of this.element.props.fields) {
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            const { name, label, placeholder, options } = field, schema = tslib_1.__rest(field, ["name", "label", "placeholder", "options"]);
            if (field.defaultValue !== undefined) {
                schema.default = field.defaultValue;
            }
            paramSchema[name] = schema;
        }
        return this.addAction({
            type: "callTool",
            tool,
            paramSchema,
            params,
            key: "submit-form",
        });
    }
}
exports.FormUIBuilder = FormUIBuilder;
//# sourceMappingURL=form.builder.js.map