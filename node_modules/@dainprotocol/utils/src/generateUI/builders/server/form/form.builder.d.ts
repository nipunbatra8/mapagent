import { DSLBuilder } from "../../../base/base.builder";
import { DslAction, SingleParamSchema } from "../../../types";
export type FormFieldType = "string" | "number" | "boolean";
export type FormFieldWidget = "text" | "password" | "email" | "url" | "tel" | "search" | "date" | "time" | "week" | "month" | "datetime-local" | "color" | "hidden" | "range" | "button" | "reset" | "submit" | "file" | "image" | "textarea" | "select" | "radio" | "checkbox";
export type FormField = SingleParamSchema & {
    name: string;
    label?: string;
    type: FormFieldType;
    widget?: FormFieldWidget;
    placeholder?: string;
    options?: Array<{
        label: string;
        value: string | number;
    }>;
    defaultValue?: string | number | boolean;
};
/**
 * Container for your entire form, including layout props, etc.
 */
export interface FormProps {
    title?: string;
    description?: string;
    fields: FormField[];
    layout?: string;
}
/**
 * A DSL builder class that creates a "form" UI element,
 * with dynamic fields and an action onSubmit.
 */
export declare class FormUIBuilder extends DSLBuilder<FormProps> {
    constructor(initialProps?: Partial<FormProps>, renderMode?: "inline" | "page");
    /**
     * Sets a title for the form.
     */
    title(title: string): this;
    /**
     * Sets a description or subtitle for the form.
     */
    description(desc: string): this;
    /**
     * Adds a new field to the form.
     */
    addField(field: FormField): this;
    /**
     * Add multiple fields at once.
     */
    addFields(fields: FormField[]): this;
    /**
     * Sets a layout style (purely descriptive; front-end decides how to handle).
     */
    setLayout(layout: string): this;
    /**
     * Defines the tool/action to be triggered on form submission.
     * Inherits the paramSchema from the defined fields automatically.
     */
    onSubmit(action: Exclude<Partial<DslAction>, "type" | "paramSchema">): this;
}
