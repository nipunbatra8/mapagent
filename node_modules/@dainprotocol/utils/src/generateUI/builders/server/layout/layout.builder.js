"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LayoutUIBuilder = void 0;
const base_builder_1 = require("../../../base/base.builder");
class LayoutUIBuilder extends base_builder_1.DSLBuilder {
    constructor(initialProps, renderMode = "inline") {
        super("layout", Object.assign({}, initialProps), renderMode);
    }
    /**
     * Sets the layout type.
     */
    setLayoutType(layoutType) {
        this.setProp("layoutType", layoutType);
        return this;
    }
    /**
     * Sets how many columns to use (if layoutType is "grid").
     */
    setColumns(columns) {
        this.setProp("columns", columns);
        return this;
    }
    /**
     * Sets the gap between items (used for grid or flex).
     */
    setGap(gap) {
        this.setProp("gap", gap);
        return this;
    }
    /**
     * Sets the flex justification of items (if layoutType is "row" or "column").
     */
    setJustifyContent(justifyContent) {
        this.setProp("justifyContent", justifyContent);
        return this;
    }
    /**
     * Sets the flex alignment of items (if layoutType is "row" or "column").
     */
    setAlignItems(alignItems) {
        this.setProp("alignItems", alignItems);
        return this;
    }
    /**
     * Sets whether items should wrap across multiple lines (for flex layouts).
     */
    setFlexWrap(flexWrap) {
        this.setProp("flexWrap", flexWrap);
        return this;
    }
    /**
     * Sets the margin around the layout container.
     */
    setMargin(margin) {
        this.setProp("margin", margin);
        return this;
    }
    /**
     * Sets the padding of the layout container.
     */
    setPadding(padding) {
        this.setProp("padding", padding);
        return this;
    }
    /**
     * Sets the background color for the layout container.
     */
    setBackgroundColor(color) {
        this.setProp("backgroundColor", color);
        return this;
    }
}
exports.LayoutUIBuilder = LayoutUIBuilder;
//# sourceMappingURL=layout.builder.js.map