"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomizeProductUIBuilder = void 0;
const base_builder_1 = require("../../../base/base.builder");
class CustomizeProductUIBuilder extends base_builder_1.DSLBuilder {
    constructor(initialProps, renderMode = "inline") {
        super("customizeProduct", Object.assign({ customizations: [] }, initialProps), renderMode);
    }
    /**
     * Adds a single customization group
     */
    addCustomization(customization) {
        this.element.props.customizations.push(customization);
        return this;
    }
    /**
     * Adds multiple customization groups at once
     */
    addCustomizations(customizations) {
        customizations.forEach(customization => this.addCustomization(customization));
        return this;
    }
    /**
     * Defines the action to be triggered when an option is selected
     */
    onOptionSelect(action) {
        const { tool, params, paramSchema } = action;
        if (!tool) {
            throw new Error("onOptionSelect action must specify a 'tool'");
        }
        return this.addAction({
            type: "callTool",
            tool,
            params,
            paramSchema,
            key: "select"
        });
    }
    /**
     * Defines the action to be triggered when proceeding with selections
     */
    onProceed(action) {
        const { tool, params, paramSchema } = action;
        if (!tool) {
            throw new Error("onProceed action must specify a 'tool'");
        }
        return this.addAction({
            type: "callTool",
            tool,
            params,
            paramSchema,
            key: "proceed"
        });
    }
    /**
     * Defines the action to be triggered when skipping customization
     */
    onSkip(action) {
        const { tool, params, paramSchema } = action;
        if (!tool) {
            throw new Error("onSkip action must specify a 'tool'");
        }
        return this.addAction({
            type: "callTool",
            tool,
            params,
            paramSchema,
            key: "skip"
        });
    }
}
exports.CustomizeProductUIBuilder = CustomizeProductUIBuilder;
//# sourceMappingURL=customizeProduct.builder.js.map