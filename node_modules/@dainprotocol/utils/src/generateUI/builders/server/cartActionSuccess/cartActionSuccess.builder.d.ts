import { DSLBuilder } from "../../../base/base.builder";
/**
 * The shape of data for the CartActionSuccess component.
 */
export interface CartActionSuccessData {
    type?: "addToCartSuccess" | "removeFromCartSuccess";
    itemsChanged?: Array<{
        product_id: string;
        quantity: number;
        selected_options?: Array<{
            option_ids: string[];
            quantity: number;
            customization_id: string;
        }>;
        notes?: string;
        product?: {
            name: string;
            image: string;
            price: number;
            requires_customization?: boolean;
        };
    }>;
}
/**
 * DSL builder for creating a "cartActionSuccess" element.
 * (No actions here, as requested.)
 */
export declare class CartActionSuccessUIBuilder extends DSLBuilder<CartActionSuccessData> {
    constructor(initialProps?: Partial<CartActionSuccessData>, renderMode?: "inline" | "page");
    /**
     * Specify the type of cart action success (e.g., addToCartSuccess).
     */
    setType(type: NonNullable<CartActionSuccessData["type"]>): this;
    /**
     * Add a single changed item to the "itemsChanged" list.
     */
    addItemChanged(item: NonNullable<CartActionSuccessData["itemsChanged"]>[number]): this;
    /**
     * Add multiple changed items at once.
     */
    addItemsChanged(items: NonNullable<CartActionSuccessData["itemsChanged"]>): this;
    /**
     * Provide DSL children to this cartActionSuccess element.
     */
    withChildren(child: DSLBuilder<any> | ReturnType<DSLBuilder<any>["build"]>): this;
}
