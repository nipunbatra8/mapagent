"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MapUIBuilder = void 0;
const base_builder_1 = require("../../../base/base.builder");
/**
 * DSL builder for creating a "map" element.
 */
class MapUIBuilder extends base_builder_1.DSLBuilder {
    constructor(initialProps, renderMode = "inline") {
        super("map", Object.assign({ markers: [], initialView: {
                latitude: 0,
                longitude: 0,
                zoom: 3,
            } }, initialProps), renderMode);
    }
    /**
     * Sets the initial view (latitude, longitude, zoom).
     */
    setInitialView(latitude, longitude, zoom) {
        this.setProp("initialView", { latitude, longitude, zoom });
        return this;
    }
    /**
     * Sets map style (could be "satellite", "streets", or any custom style).
     */
    setMapStyle(style) {
        this.setProp("mapStyle", style);
        return this;
    }
    /**
     * Sets the minimum and maximum zoom levels.
     */
    setZoomRange(minZoom, maxZoom) {
        if (minZoom !== undefined) {
            this.setProp("minZoom", minZoom);
        }
        if (maxZoom !== undefined) {
            this.setProp("maxZoom", maxZoom);
        }
        return this;
    }
    /**
     * Add a single marker to the map.
     */
    addMarker(marker) {
        this.element.props.markers.push(marker);
        return this;
    }
    /**
     * Add multiple markers at once.
     */
    addMarkers(markers) {
        markers.forEach((m) => this.addMarker(m));
        return this;
    }
    /**
     * Example action, triggered on marker click or other map event.
     * You can rename this if you have a different action in mind.
     */
    onMarkerClick(action) {
        const { tool, params } = action;
        if (!tool) {
            throw new Error("onMarkerClick action must specify a 'tool' (callTool).");
        }
        this.addAction({
            type: "callTool",
            tool,
            params,
            key: "on-marker-click",
        });
        return this;
    }
    /**
     * Provide DSL children to this map element.
     */
    withChildren(child) {
        this.addChild(child);
        return this;
    }
}
exports.MapUIBuilder = MapUIBuilder;
//# sourceMappingURL=map.builder.js.map