"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MenuUIBuilder = void 0;
const base_builder_1 = require("../../../base/base.builder");
class MenuUIBuilder extends base_builder_1.DSLBuilder {
    constructor(initialProps, renderMode = "inline") {
        super("menu", Object.assign({ categories: [], totalPages: 1, currentPage: 1 }, initialProps), renderMode);
    }
    /**
     * Sets pagination details
     */
    setPagination(currentPage, totalPages) {
        this.setProp("currentPage", currentPage);
        this.setProp("totalPages", totalPages);
        return this;
    }
    /**
     * Adds a single category with its products
     */
    addCategory(category) {
        this.element.props.categories.push(category);
        return this;
    }
    /**
     * Adds multiple categories at once
     */
    addCategories(categories) {
        categories.forEach(category => this.addCategory(category));
        return this;
    }
    /**
     * Defines the action to be triggered when adding a product to order
     */
    onAddToOrder(action) {
        const { tool, params, paramSchema } = action;
        if (!tool) {
            throw new Error("onAddToOrder action must specify a 'tool'");
        }
        return this.addAction({
            type: "callTool",
            tool,
            params,
            paramSchema,
            key: "addToOrder"
        });
    }
    /**
     * Defines the action to be triggered when changing categories
     */
    onCategoryChange(action) {
        const { tool, params, paramSchema } = action;
        if (!tool) {
            throw new Error("onCategoryChange action must specify a 'tool'");
        }
        return this.addAction({
            type: "callTool",
            tool,
            params,
            paramSchema,
            key: "categoryChange"
        });
    }
}
exports.MenuUIBuilder = MenuUIBuilder;
//# sourceMappingURL=menu.builder.js.map