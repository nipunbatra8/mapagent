"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataGridUIBuilder = void 0;
const base_builder_1 = require("../../../base/base.builder");
// DataGridUIBuilder: a unified builder for DataGrid components.
class DataGridUIBuilder extends base_builder_1.DSLBuilder {
    constructor(initialProps, renderMode = "inline") {
        super("datagrid", initialProps, renderMode);
    }
    /**
     * Adds a single column to the grid.
     */
    addColumn(column) {
        if (!this.element.props.columns) {
            this.element.props.columns = [];
        }
        this.element.props.columns.push(column);
        return this;
    }
    addColumns(columnsOrItems, mapper) {
        if (mapper) {
            columnsOrItems.forEach((item) => {
                this.addColumn(mapper(item));
            });
        }
        else {
            columnsOrItems.forEach((column) => {
                this.addColumn(column);
            });
        }
        return this;
    }
    /**
     * Sets the rows for the data grid.
     */
    rows(rows) {
        return this.setProp("rows", rows);
    }
    onRowClick(action) {
        const { tool, paramSchema, params } = action;
        if (!tool || !params) {
            throw new Error("onRowClick action must have a tool, paramSchema, and params");
        }
        return this.addAction({
            type: "callTool",
            tool,
            paramSchema,
            params,
            key: "onRowClick",
        });
    }
}
exports.DataGridUIBuilder = DataGridUIBuilder;
//# sourceMappingURL=dataGrid.builder.js.map