"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = testchat;
var anthropic_1 = require("@ai-sdk/anthropic");
var ai_1 = require("ai");
require("dotenv/config");
var readline = __importStar(require("node:readline/promises"));
var client_1 = require("@dainprotocol/service-sdk/client");
var utils_1 = require("../utils");
var terminal = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
});
function chat(dainConnection) {
    return __awaiter(this, void 0, void 0, function () {
        var allTools, toolBoxes, _i, toolBoxes_1, toolBox, toolBoxTools, messages, toolResponseAvailable, userInput, _a, text, toolCalls, toolResults, responseMessages, _b, toolCalls_1, _c, toolName, args, _d, toolResults_1, _e, toolName, result, error_1;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    allTools = {};
                    return [4 /*yield*/, dainConnection.getToolboxes()];
                case 1:
                    toolBoxes = _f.sent();
                    _i = 0, toolBoxes_1 = toolBoxes;
                    _f.label = 2;
                case 2:
                    if (!(_i < toolBoxes_1.length)) return [3 /*break*/, 5];
                    toolBox = toolBoxes_1[_i];
                    if (!toolBox.id)
                        return [3 /*break*/, 4];
                    return [4 /*yield*/, dainConnection.loadToolbox(toolBox.id, true)];
                case 3:
                    toolBoxTools = _f.sent();
                    allTools = __assign(__assign({}, allTools), toolBoxTools);
                    _f.label = 4;
                case 4:
                    _i++;
                    return [3 /*break*/, 2];
                case 5:
                    messages = [];
                    toolResponseAvailable = false;
                    _f.label = 6;
                case 6:
                    if (!true) return [3 /*break*/, 12];
                    if (!!toolResponseAvailable) return [3 /*break*/, 8];
                    return [4 /*yield*/, terminal.question("You: ")];
                case 7:
                    userInput = _f.sent();
                    if (userInput.toLowerCase() === "exit") {
                        console.log("Goodbye!");
                        terminal.close();
                        return [2 /*return*/];
                    }
                    messages.push({ role: "user", content: userInput });
                    _f.label = 8;
                case 8:
                    _f.trys.push([8, 10, , 11]);
                    console.log("messages", messages);
                    return [4 /*yield*/, (0, ai_1.generateText)({
                            model: (0, anthropic_1.anthropic)("claude-3-5-sonnet-20240620"),
                            system: "        Keep your responses brief but insightful.\n        use lots of emojis, to show your enthusiasm!\n        Your name is Butterfly, Built by the team at Dain. \n        You are given tools only use them if they ask for it or if it helps you accomplish the task.\n        when explaining topics you can use diagrams to help visualize the concepts.\n        if the user asks for a tool, you can use it to help them\n        You always answer the with markdown formatting. use markdown when it would be possible.\n  You support the following markdown headings, bold, italic, links, tables, lists, code blocks, and blockquotes.\n  You do not support images and never include images. You can also use emojis to show enthusiasm!\n Tools often have UI components that directly display to the user, once they are displayed you dont need to repeat the tool name or what it does or what its supposed to output, assume the user can already see the output.\n",
                            tools: allTools,
                            messages: messages,
                            maxSteps: 5,
                        })];
                case 9:
                    _a = _f.sent(), text = _a.text, toolCalls = _a.toolCalls, toolResults = _a.toolResults, responseMessages = _a.responseMessages;
                    toolResponseAvailable = false;
                    if (text) {
                        process.stdout.write("\nAssistant: ".concat(text));
                    }
                    for (_b = 0, toolCalls_1 = toolCalls; _b < toolCalls_1.length; _b++) {
                        _c = toolCalls_1[_b], toolName = _c.toolName, args = _c.args;
                        process.stdout.write("\nTool call: '".concat(toolName, "' ").concat(JSON.stringify(args)));
                    }
                    for (_d = 0, toolResults_1 = toolResults; _d < toolResults_1.length; _d++) {
                        _e = toolResults_1[_d], toolName = _e.toolName, result = _e.result;
                        process.stdout.write("\nTool response: '".concat(toolName, "' ").concat(JSON.stringify(result)));
                    }
                    process.stdout.write("\n\n");
                    messages.push.apply(messages, responseMessages);
                    toolResponseAvailable = toolCalls.length > 0;
                    return [3 /*break*/, 11];
                case 10:
                    error_1 = _f.sent();
                    console.error("Error generating response:", error_1);
                    return [3 /*break*/, 11];
                case 11: return [3 /*break*/, 6];
                case 12: return [2 /*return*/];
            }
        });
    });
}
function testchat(options) {
    return __awaiter(this, void 0, void 0, function () {
        var config, url, agentAuth, dainConnection;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    config = (0, utils_1.getDainConfig)(options.config);
                    url = options.url || process.env.TEST_CHAT_URL;
                    if (!url) {
                        console.error("Error: Please provide a URL using --url option or set TEST_CHAT_URL in your .env file");
                        process.exit(1);
                    }
                    if (!process.env.ANTHROPIC_API_KEY) {
                        console.error("Error: ANTHROPIC_API_KEY is not set in your .env file");
                        process.exit(1);
                    }
                    if (!config["api-key"]) {
                        throw new Error("'api-key' is required when using development proxy");
                    }
                    agentAuth = new client_1.DainClientAuth({
                        apiKey: config["api-key"],
                    });
                    dainConnection = new client_1.DainServiceConnection(url, agentAuth);
                    console.log('Starting chat session. Type "exit" to end the conversation.');
                    return [4 /*yield*/, chat(dainConnection)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
