"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = dev;
var child_process_1 = require("child_process");
var utils_1 = require("../utils");
var ora_1 = __importDefault(require("ora"));
var chokidar_1 = __importDefault(require("chokidar"));
var path_1 = __importDefault(require("path"));
var miniflare_1 = require("miniflare");
var build_1 = __importDefault(require("./build"));
var fs_extra_1 = __importDefault(require("fs-extra"));
var net_1 = require("net");
var childProcess = null;
var watcher = null;
var mf = null;
var tunnelUrl = null;
function isPortAvailable(port) {
    return new Promise(function (resolve) {
        var server = (0, net_1.createServer)()
            .listen(port, function () {
            server.close();
            resolve(true);
        })
            .on('error', function () {
            resolve(false);
        });
    });
}
function startProcess(command, options) {
    var _a, _b;
    if (childProcess) {
        childProcess.kill();
    }
    var spinner = (0, ora_1.default)('Starting development server...').start();
    childProcess = (0, child_process_1.exec)(command, options);
    (_a = childProcess.stdout) === null || _a === void 0 ? void 0 : _a.on('data', function (data) {
        spinner.succeed('Development server started.');
        if (tunnelUrl) {
            (0, utils_1.displayTunnelUrl)(tunnelUrl);
        }
        console.log(data);
    });
    (_b = childProcess.stderr) === null || _b === void 0 ? void 0 : _b.on('data', function (data) {
        spinner.fail('Development server error.');
        (0, utils_1.logError)(data);
    });
    childProcess.on('close', function (code) {
        if (code !== 0) {
            spinner.fail("Development server exited with code ".concat(code));
        }
    });
}
function cleanup() {
    if (childProcess) {
        childProcess.kill();
        childProcess = null;
    }
    if (watcher) {
        watcher.close();
        watcher = null;
    }
    if (mf) {
        mf.dispose();
        mf = null;
    }
    (0, utils_1.logInfo)('Development server and file watcher stopped.');
    process.exit(0);
}
function dev(options) {
    return __awaiter(this, void 0, void 0, function () {
        var config, portSource, port, portNumber, runtime, tsNodePath, command, envVars, proxyServer, portNumber_1, proxySetup, watchPaths, dainDir, outFile, MFconfig_1, debounceTimer_1, watchDirs, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    config = (0, utils_1.getDainConfig)(options.config);
                    if (process.env.PORT) {
                        port = process.env.PORT;
                        portSource = '.env file';
                    }
                    else if (options.port) {
                        port = options.port;
                        portSource = 'command line argument';
                    }
                    else {
                        port = '2022';
                        portSource = 'default value';
                    }
                    portNumber = parseInt(port);
                    if (isNaN(portNumber) || portNumber < 0 || portNumber > 65535) {
                        (0, utils_1.logError)('Invalid port number. Using default port 2022');
                        options.port = '2022';
                        portSource = 'default value (after invalid port)';
                    }
                    else {
                        options.port = port;
                    }
                    (0, utils_1.logInfo)("Using port ".concat(options.port, " (from ").concat(portSource, ")"));
                    console.log('Config: ' + JSON.stringify(config));
                    runtime = options.runtime || config.runtime || 'node';
                    console.log('Runtime: ' + runtime);
                    tsNodePath = path_1.default.join(process.cwd(), 'node_modules', '.bin', 'ts-node');
                    command = "\"".concat(tsNodePath, "\" \"").concat(config['main-file'], "\"");
                    envVars = {
                        PORT: options.port,
                        DAIN_API_KEY: config['api-key'],
                        DAIN_PROJECT_ID: config['project-id'],
                        DAIN_ENVIRONMENT: config['environment'],
                        DAIN_OUT_DIR: config['out-dir'],
                    };
                    proxyServer = null;
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 9, , 10]);
                    portNumber_1 = parseInt(options.port);
                    return [4 /*yield*/, isPortAvailable(portNumber_1)];
                case 2:
                    if (!(_a.sent())) {
                        (0, utils_1.logError)("Port ".concat(portNumber_1, " is already in use. Please use a different port with --port option."));
                        process.exit(1);
                    }
                    process.env.PORT = portNumber_1.toString();
                    if (!!options.noproxy) return [3 /*break*/, 4];
                    if (!config['api-key']) {
                        throw new Error("'api-key' is required when using development proxy");
                    }
                    return [4 /*yield*/, (0, utils_1.setupProxy)(options.port, config['api-key'], config)];
                case 3:
                    proxySetup = _a.sent();
                    proxyServer = proxySetup.client;
                    tunnelUrl = proxySetup.tunnelUrl;
                    _a.label = 4;
                case 4:
                    if (!(runtime === 'node')) return [3 /*break*/, 5];
                    // Existing Node.js development process
                    startProcess(command, { env: __assign(__assign({}, process.env), envVars) });
                    watchPaths = [
                        path_1.default.dirname(config['main-file']),
                        config['static-dir']
                            ? path_1.default.join(process.cwd(), config['static-dir'])
                            : (0, utils_1.getStaticFilesPath)(),
                    ];
                    watcher = chokidar_1.default.watch(watchPaths, {
                        ignored: /(^|[\/\\])\../, // ignore dotfiles
                        persistent: true,
                    });
                    watcher.on('change', function (path) {
                        (0, utils_1.logInfo)("File ".concat(path, " has been changed. Restarting..."));
                        startProcess(command, { env: __assign(__assign({}, process.env), envVars) });
                    });
                    (0, utils_1.logInfo)('Watching for file changes...');
                    // Add signal handlers for graceful shutdown
                    process.on('SIGINT', function () {
                        cleanup();
                        if (proxyServer) {
                            proxyServer.close(function () {
                                (0, utils_1.logInfo)('Proxy server closed.');
                                setTimeout(function () {
                                    process.exit(0);
                                }, 500);
                            });
                        }
                        else {
                            setTimeout(function () {
                                process.exit(0);
                            }, 500);
                        }
                    });
                    process.on('SIGTERM', function () {
                        cleanup();
                        if (proxyServer) {
                            proxyServer.close(function () {
                                (0, utils_1.logInfo)('Proxy server closed.');
                                setTimeout(function () {
                                    process.exit(0);
                                }, 500);
                            });
                        }
                        else {
                            setTimeout(function () {
                                process.exit(0);
                            }, 500);
                        }
                    });
                    // Handle uncaught exceptions and unhandled rejections
                    process.on('uncaughtException', function (error) {
                        (0, utils_1.logError)('Uncaught Exception:', error);
                        cleanup();
                        if (proxyServer)
                            proxyServer.close();
                        setTimeout(function () {
                            process.exit(1);
                        }, 500);
                    });
                    process.on('unhandledRejection', function (reason, promise) {
                        (0, utils_1.logError)('Unhandled Rejection at:', promise + '\n\nreason:' + reason);
                        cleanup();
                        if (proxyServer)
                            proxyServer.close();
                        setTimeout(function () {
                            process.exit(1);
                        }, 500);
                    });
                    return [3 /*break*/, 8];
                case 5:
                    if (!(runtime === 'workers')) return [3 /*break*/, 7];
                    dainDir = path_1.default.join(process.cwd(), '.dain');
                    outFile = path_1.default.join(dainDir, path_1.default.basename(config['main-file'], '.ts') + '.mjs');
                    // Start the build process in watch mode
                    return [4 /*yield*/, (0, build_1.default)({ config: options.config, runtime: 'workers', watch: true })];
                case 6:
                    // Start the build process in watch mode
                    _a.sent();
                    MFconfig_1 = {
                        scriptPath: outFile,
                        modules: true,
                        port: parseInt(options.port),
                        log: new miniflare_1.Log(miniflare_1.LogLevel.DEBUG),
                        liveReload: true,
                    };
                    mf = new miniflare_1.Miniflare(MFconfig_1);
                    (0, utils_1.logSuccess)("Miniflare server started on port ".concat(options.port));
                    watchDirs = [dainDir];
                    watchDirs.forEach(function (dir) {
                        fs_extra_1.default.watch(dir, { recursive: true }, function (eventType, filename) {
                            clearTimeout(debounceTimer_1);
                            debounceTimer_1 = setTimeout(function () {
                                if (mf) {
                                    //  mf.setOptions({ scriptPath: outFile });
                                    mf.setOptions(MFconfig_1);
                                    (0, utils_1.logInfo)("Build updated (".concat(filename, ")"));
                                }
                            }, 300); // 300ms debounce time
                        });
                    });
                    (0, utils_1.logInfo)('Watching for file changes in source and build directories...');
                    return [3 /*break*/, 8];
                case 7: throw new Error("Unsupported runtime: ".concat(runtime));
                case 8: return [3 /*break*/, 10];
                case 9:
                    error_1 = _a.sent();
                    (0, utils_1.logError)("Error in dev process for ".concat(runtime, " runtime:"), error_1);
                    cleanup();
                    if (proxyServer)
                        proxyServer.close();
                    setTimeout(function () {
                        process.exit(1);
                    }, 500);
                    return [3 /*break*/, 10];
                case 10: return [2 /*return*/];
            }
        });
    });
}
