"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = logs;
var ora_1 = __importDefault(require("ora"));
var utils_1 = require("../utils");
function logs(options_1) {
    return __awaiter(this, arguments, void 0, function (options, isWatching) {
        var config, orgId, _a, apiKey, deploymentId, logsUrl, spinner, result, formatLogs, error_1;
        if (isWatching === void 0) { isWatching = false; }
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    config = (0, utils_1.getDainConfig)(options.config);
                    orgId = 'hackathon';
                    _a = initializeConfig(config, orgId), apiKey = _a.apiKey, deploymentId = _a.deploymentId, logsUrl = _a.logsUrl;
                    if (!orgId || !deploymentId) {
                        (0, utils_1.logError)('Org ID or deployment ID not found');
                        return [2 /*return*/];
                    }
                    spinner = (0, ora_1.default)("Fetching logs for project ".concat(config['project-id'], "...")).start();
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 3, 4, 5]);
                    result = null;
                    return [4 /*yield*/, fetchLogs(logsUrl, apiKey)];
                case 2:
                    result = _b.sent();
                    formatLogs = formatProjectLogs(result, deploymentId);
                    if (isWatching) {
                        // clear terminal before printing logs when watching
                        process.stdout.write('\x1Bc');
                    }
                    (0, utils_1.logInfo)("Project logs: ".concat(formatLogs));
                    if (options.watch) {
                        setTimeout(function () { return logs(options, true); }, 10000);
                    }
                    if (!options.watch) {
                        process.exit(0);
                    }
                    return [3 /*break*/, 5];
                case 3:
                    error_1 = _b.sent();
                    handleError(spinner, error_1);
                    return [3 /*break*/, 5];
                case 4:
                    spinner.stop();
                    return [7 /*endfinally*/];
                case 5: return [2 /*return*/];
            }
        });
    });
}
var initializeConfig = function (config, orgId) {
    var baseUrl = config['platform-base-url'] || 'https://codegen-deploy-service.dainapp.com/';
    var apiKey = config['api-key'];
    var deploymentId = config['deployment-id'];
    var logsUrl = "".concat(baseUrl, "/codegen-deploy/logs/").concat(orgId, "/").concat(deploymentId);
    return { baseUrl: baseUrl, apiKey: apiKey, orgId: orgId, deploymentId: deploymentId, logsUrl: logsUrl };
};
var fetchLogs = function (logsUrl, apiKey) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, fetch(logsUrl, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-DAIN-SIGNATORY-ADDRESS': 'TODO: X-DAIN-SIGNATORY-ADDRESS',
                        'X-DAIN-SIGNATURE': 'TODO: X-DAIN-SIGNATORY-SIGNATURE',
                        Authorization: "Bearer ".concat(apiKey),
                    },
                })];
            case 1:
                response = _a.sent();
                if (!response.ok) {
                    throw new Error("Log fetch failed: ".concat(response.statusText));
                }
                return [4 /*yield*/, response.json()];
            case 2: return [2 /*return*/, _a.sent()];
        }
    });
}); };
var handleError = function (spinner, error) {
    spinner.fail('Failed to retrieve project logs.');
    (0, utils_1.logError)('Error during log fetch', error);
};
var formatProjectLogs = function (projectLogs, deploymentId) {
    try {
        var _a = projectLogs.logs, logs_1 = _a === void 0 ? '' : _a, metadata = __rest(projectLogs, ["logs"]);
        var formatDate_1 = function (dateString) {
            try {
                return new Date(dateString).toLocaleString();
            }
            catch (_a) {
                return dateString;
            }
        };
        var formattedMetadata = Object.entries(metadata)
            .map(function (_a) {
            var _b;
            var key = _a[0], value = _a[1];
            var formattedValue = ((_b = value === null || value === void 0 ? void 0 : value.includes) === null || _b === void 0 ? void 0 : _b.call(value, 'T'))
                ? formatDate_1(value)
                : value;
            var formattedKey = key.replace(/([A-Z])/g, ' $1').toLowerCase();
            return "\u001B[36m".concat(formattedKey, ":\u001B[0m ").concat(formattedValue);
        })
            .join('\n');
        var projectUrl = "\nurl: https://".concat(deploymentId.replace('codegen-', ''), "-agent.dainapp.com");
        var output = [
            '\n',
            '\x1b[1m=== Project ===\x1b[0m',
            formattedMetadata,
            projectUrl,
            '\n\x1b[1m=== Logs ===\x1b[0m',
            logs_1,
        ];
        return output.join('\n');
    }
    catch (error) {
        return "Error formatting logs: ".concat(error.message);
    }
};
