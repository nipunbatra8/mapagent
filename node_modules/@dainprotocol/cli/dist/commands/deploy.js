"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = deploy;
var utils_1 = require("../utils");
var ora_1 = __importDefault(require("ora"));
var fs_extra_1 = __importDefault(require("fs-extra"));
var path_1 = __importDefault(require("path"));
var archiver_1 = __importDefault(require("archiver"));
var build_1 = __importDefault(require("./build"));
var status_1 = __importDefault(require("./status"));
var START_DEPLOY_URI = '/api/app/data/deployments/start-deploy';
function deploy(options) {
    return __awaiter(this, void 0, void 0, function () {
        var config, spinner, basePath, deployPath, envArray, result, deploymentId, dainJson, dainJsonObject, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    config = (0, utils_1.getDainConfig)(options.config);
                    spinner = (0, ora_1.default)('Deploying project...').start();
                    basePath = config['api-base-url'] || 'https://dain-platform-ochre.vercel.app';
                    deployPath = "".concat(basePath).concat(START_DEPLOY_URI);
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 9, , 10]);
                    return [4 /*yield*/, loadAndValidateEnvVariables()];
                case 2:
                    envArray = _a.sent();
                    return [4 /*yield*/, (0, build_1.default)({ config: options.config, deploy: true })];
                case 3:
                    _a.sent();
                    return [4 /*yield*/, deployAndPushFiles(deployPath, envArray)];
                case 4:
                    result = _a.sent();
                    deploymentId = result.deploymentId.replace('codegen-', '');
                    return [4 /*yield*/, recursiveStatusUntilRunning(JSON.stringify(config), deploymentId)];
                case 5:
                    _a.sent();
                    return [4 /*yield*/, fs_extra_1.default.readFile('./dain.json', 'utf-8')];
                case 6:
                    dainJson = _a.sent();
                    dainJsonObject = JSON.parse(dainJson);
                    dainJsonObject['deployment-id'] = deploymentId;
                    return [4 /*yield*/, fs_extra_1.default.writeFile('./dain.json', JSON.stringify(dainJsonObject, null, 2))];
                case 7:
                    _a.sent();
                    console.log('\n-----------------------');
                    spinner.succeed("Deployment URL: ".concat(result.service.url));
                    spinner.succeed("Deployment ID: ".concat(result.deploymentId));
                    spinner.succeed('Deployment completed at: ' + new Date().toISOString());
                    spinner.succeed('Deployment completed successfully.');
                    spinner.info('You can access logs using `dain logs -w` command.');
                    console.log('-----------------------');
                    return [4 /*yield*/, fetch(result.service.url, {
                            method: 'GET',
                        })];
                case 8:
                    _a.sent();
                    process.exit(0);
                    return [3 /*break*/, 10];
                case 9:
                    error_1 = _a.sent();
                    spinner.fail('Deployment failed.');
                    (0, utils_1.logError)('Error during deployment: ', error_1);
                    process.exit(1);
                    return [3 /*break*/, 10];
                case 10: return [2 /*return*/];
            }
        });
    });
}
// Loads and validates environment variables
function loadAndValidateEnvVariables() {
    return __awaiter(this, void 0, void 0, function () {
        var envArray;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, loadEnvVariables()];
                case 1:
                    envArray = _a.sent();
                    if (envArray.length === 0) {
                        (0, utils_1.logError)('No environment variables found. Please ensure your .env file is correctly set up.');
                        process.exit(1);
                    }
                    if (!envArray.some(function (env) { return env.name === 'DAIN_API_KEY'; })) {
                        (0, utils_1.logError)('DAIN_API_KEY not found in environment variables. Please check your .env file.');
                        process.exit(1);
                    }
                    return [2 /*return*/, envArray];
            }
        });
    });
}
// Deploys and pushes files to the platform
function deployAndPushFiles(startDeployUrl, envArray) {
    return __awaiter(this, void 0, void 0, function () {
        var projectZip, projectZipBuffer, formData, response, errorText, result, error_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, zipDirectory('./', 'project.zip')];
                case 1:
                    projectZip = _a.sent();
                    return [4 /*yield*/, fs_extra_1.default.readFile(projectZip)];
                case 2:
                    projectZipBuffer = _a.sent();
                    formData = new FormData();
                    formData.append('array', JSON.stringify(envArray));
                    formData.append('file', new Blob([projectZipBuffer]), 'project.zip');
                    _a.label = 3;
                case 3:
                    _a.trys.push([3, 8, , 9]);
                    return [4 /*yield*/, fetch(startDeployUrl, {
                            method: 'POST',
                            body: formData,
                        })];
                case 4:
                    response = _a.sent();
                    if (!!response.ok) return [3 /*break*/, 6];
                    return [4 /*yield*/, response.text()];
                case 5:
                    errorText = _a.sent();
                    throw new Error("Deployment failed: ".concat(response.statusText, ". Response: ").concat(errorText));
                case 6: return [4 /*yield*/, response.json()];
                case 7:
                    result = _a.sent();
                    return [2 /*return*/, result];
                case 8:
                    error_2 = _a.sent();
                    (0, utils_1.logError)('Error during deployment and push files: ', error_2.stack);
                    console.error('Detailed error:', error_2);
                    process.exit(1);
                    return [3 /*break*/, 9];
                case 9: return [2 /*return*/];
            }
        });
    });
}
// Reads the .env file and returns an array of key-value pairs
function loadEnvVariables() {
    return __awaiter(this, void 0, void 0, function () {
        var files, envFile, envContent;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, fs_extra_1.default.readdir('./')];
                case 1:
                    files = _a.sent();
                    envFile = files.find(function (file) { return file === '.env'; });
                    if (!envFile) {
                        (0, utils_1.logError)('Environment file not found. Please create a .env file in the build directory.');
                        process.exit(1);
                    }
                    return [4 /*yield*/, fs_extra_1.default.readFile(path_1.default.join('./', envFile), 'utf-8')];
                case 2:
                    envContent = _a.sent();
                    return [2 /*return*/, envContent
                            .split('\n')
                            .map(function (line) {
                            var _a = line.split('='), name = _a[0], value = _a[1];
                            return { name: name, value: value };
                        })
                            .filter(function (env) { return env.name && env.value; })];
            }
        });
    });
}
// Zips the current directory and returns the path to the zip file
function zipDirectory(sourceDir, outputZip) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    var output = fs_extra_1.default.createWriteStream(outputZip);
                    var archive = (0, archiver_1.default)('zip', { zlib: { level: 9 } });
                    output.on('close', function () { return resolve(outputZip); });
                    archive.on('error', function (err) {
                        (0, utils_1.logError)('Error during zipping the directory: ', err);
                        reject(err);
                    });
                    archive.pipe(output);
                    archive.glob('**/*', { ignore: ['node_modules/**', 'project.zip'] });
                    archive.finalize();
                })];
        });
    });
}
var recursiveStatusUntilRunning = function (config, deploymentId) { return __awaiter(void 0, void 0, void 0, function () {
    var statusResult;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, status_1.default)({}, deploymentId)];
            case 1:
                statusResult = _a.sent();
                if (statusResult.status === 'RUNNING') {
                    return [2 /*return*/];
                }
                return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 15000); })];
            case 2:
                _a.sent();
                return [4 /*yield*/, recursiveStatusUntilRunning(config, deploymentId)];
            case 3:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
