"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDainConfig = getDainConfig;
exports.displayTunnelUrl = displayTunnelUrl;
exports.setupProxy = setupProxy;
exports.logError = logError;
exports.logSuccess = logSuccess;
exports.logInfo = logInfo;
exports.getStaticFilesPath = getStaticFilesPath;
exports.extractOrgId = extractOrgId;
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var client_1 = require("@dainprotocol/tunnel/client");
var ora_1 = __importDefault(require("ora"));
var chalk_1 = __importDefault(require("chalk"));
var dotenv_1 = __importDefault(require("dotenv"));
function loadEnvFiles() {
    var envFiles = ['.env.local', '.env', '.env.development', '.env.production'];
    envFiles.forEach(function (file) {
        var envPath = path_1.default.join(process.cwd(), file);
        if (fs_1.default.existsSync(envPath)) {
            dotenv_1.default.config({ path: envPath });
        }
    });
}
function getDainConfig(configFile) {
    loadEnvFiles(); // Loads all env files first
    var defaultConfigPath = path_1.default.join(process.cwd(), 'dain.json');
    var configPath = configFile
        ? path_1.default.join(process.cwd(), configFile)
        : defaultConfigPath;
    console.log('Config path: ', configPath);
    if (!fs_1.default.existsSync(configPath)) {
        logError("Configuration file not found: ".concat(configPath));
        process.exit(1);
    }
    try {
        var configData = fs_1.default.readFileSync(configPath, 'utf8');
        var config = JSON.parse(configData);
        // Validate required fields
        if (!config['main-file']) {
            throw new Error("Configuration must include 'main-file'");
        }
        // Set default values for optional fields
        config['environment'] = config['environment'] || 'development';
        config['version'] = config['version'] || '1.0.0';
        config['out-dir'] = config['out-dir'] || 'dist'; // Default to 'dist' if not specified
        config['tunnel-base-url'] =
            config['tunnel-base-url'] || 'wss:///tunnel.dain-local.com'; // Default value if not specified
        config['runtime'] = config['runtime'] || 'node'; // Add this line
        // Handle API key
        if (!config['api-key'] ||
            config['api-key'] === 'env' ||
            config['api-key'] === 'MUST PUT IN .env.development as DAIN_API_KEY=YOUR_API_KEY') {
            config['api-key'] = process.env.DAIN_API_KEY;
        }
        if (!config['api-key']) {
            throw new Error('API key is not set in config or DAIN_API_KEY environment variable');
        }
        return config;
    }
    catch (error) {
        throw new Error("Error reading or parsing configuration file: ".concat(error));
    }
}
function displayTunnelUrl(tunnelUrl) {
    var divider = chalk_1.default.green('------------------------------------------------------------');
    var header = chalk_1.default.green('Your service is available publicly at:');
    var url = chalk_1.default.cyan.underline(tunnelUrl);
    var info = chalk_1.default.yellow('This service URL can be connected to by a DAIN client or assistant');
    var subInfo = chalk_1.default.yellow('(such as butterfly in development mode)');
    var warning = chalk_1.default.red('You should not visit this URL directly');
    console.log("\n".concat(divider, "\n").concat(header, "\n").concat(url, "\n\n").concat(info, "\n").concat(subInfo, "\n\n").concat(warning, "\n").concat(divider, "\n"));
}
function setupProxy(port, apiKey, config) {
    return __awaiter(this, void 0, void 0, function () {
        var spinner, client, tunnelUrl, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    spinner = (0, ora_1.default)('Setting up proxy...').start();
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    client = new client_1.DainTunnel(config['tunnel-base-url'] || 'wss:///tunnel.dain-local.com', apiKey);
                    return [4 /*yield*/, client.start(parseInt(port))];
                case 2:
                    tunnelUrl = _a.sent();
                    spinner.succeed('Proxy setup complete');
                    displayTunnelUrl(tunnelUrl);
                    return [2 /*return*/, { client: client, tunnelUrl: tunnelUrl }];
                case 3:
                    error_1 = _a.sent();
                    spinner.fail(chalk_1.default.red('Error setting up proxy'));
                    console.error(chalk_1.default.red(error_1));
                    throw error_1;
                case 4: return [2 /*return*/];
            }
        });
    });
}
function logError(message, error) {
    console.error(chalk_1.default.red("\nError: ".concat(message)));
    if (error) {
        console.error(chalk_1.default.red(error));
    }
}
function logSuccess(message) {
    console.log(chalk_1.default.green("\nSuccess: ".concat(message)));
}
function logInfo(message) {
    console.log(chalk_1.default.blue("\nInfo: ".concat(message)));
}
function getStaticFilesPath() {
    return path_1.default.join(process.cwd(), 'static');
}
function extractOrgId(apiKey) {
    var apiKeySplit = apiKey === null || apiKey === void 0 ? void 0 : apiKey.split('_');
    return apiKeySplit ? apiKeySplit[2] : '';
}
